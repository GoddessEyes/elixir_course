# ----------
# MARK:start
~/p/elixir_course_junior/lib/lesson_01 $ iex
Erlang/OTP 23 [erts-11.1] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [hipe]

Interactive Elixir (1.13.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)>
# END_MARK:start
# ----------
# MARK:compile
iex> c "lib/fizz_buzz_02.exs"
[FizzBuzz02]
iex(2)>
# END_MARK:compile
# ----------
# MARK:compile_help
iex(1)> h c

                        def c(files, path \\ :in_memory)

Compiles the given files.
...
# END_MARK:compile_help
# ----------
# MARK:recompile
iex> r FizzBuzz02
warning: redefining module FizzBuzz02 (current version defined in memory)
  lib/fizz_buzz_02.exs:1

{:reloaded, [FizzBuzz02]}
# END_MARK:recompile
# ----------
# MARK:autocomplete
iex> Fizz.<tab>
iex> FizzBuzz02.<tab>
iex> FizzBuzz02.m<tab>
iex> FizzBuzz02.main
# END_MARK:autocomplete
# ----------
# MARK:introspection
iex> i 42
Term
  42
Data type
  Integer
...

iex> i 3.14
Term
  3.14
Data type
  Float
...

iex> my_str = "Hello"
iex> i my_str
Term
  "Hello"
Data type
  BitString
Byte size
  5
Description
  This is a string: a UTF-8 encoded binary ...

iex> my_list = [1, 2, 3]
iex> i my_list
Term
  [1, 2, 3]
Data type
  List
...
# END_MARK:introspection
# ----------
# MARK:history
iex(9)> 42 * 2
84
iex(10)> v
84
iex(11)> v 9
84
iex(12)> 20 + 30
50
iex(13)> v
50
iex(14)> v 12
50
iex(15)> v 9
84
# END_MARK:history
# ----------
# MARK:help
iex> h
iex> h Map
iex> h Map.get
iex> h Map.<tab>
iex> h Map.fetch
# END_MARK:help
# ----------
# MARK:module_info
iex> Map.module_info
[
  module: Map,
  exports: [
    __info__: 1,
    delete: 2,
    equal?: 2,
    fetch: 2,
    fetch!: 2,
...

iex> FizzBuzz02.module_info
[
  module: FizzBuzz02,
  exports: [__info__: 1, fizzbuzz: 1, main: 0, module_info: 0, module_info: 1],
  attributes: [vsn: [19328415140430776990959847375304151410]],
  compile: [
...
# END_MARK:module_info
# ----------
# MARK:fizzbuzz_help
iex> c "lib/fizz_buzz_04.exs"
iex> h FizzBuzz04
FizzBuzz04 was not compiled with docs
# END_MARK:fizzbuzz_help
# ----------
# MARK:fizzbuzz_help_2
iex> c("lib/fizz_buzz_04.exs", ".")
iex> h FizzBuzz04
                                   FizzBuzz04

FizzBuzz is a simple module to show basic usage of Elixir.

iex> h FizzBuzz04.fizzbuzz_100

                               def fizzbuzz_100()

  @spec fizzbuzz_100() :: [String.t()]

Produces list of strings for numbers from 1 to 100.

iex> h FizzBuzz04.fizzbuzz

                                def fizzbuzz(n)

  @spec fizzbuzz(integer()) :: String.t()

Produces string result for a single number.

# END_MARK:fizzbuzz_help_2
# ----------
# MARK:runtime_info
iex> runtime_info
## System and architecture

Elixir version:     1.13.4
Erlang/OTP version: 23
...

## Memory

Total:              20 MB
Atoms:              328 KB
...

## Statistics / limits

Uptime:             1 minutes and 40 seconds
...

iex> runtime_info :system

## System and architecture

Elixir version:     1.13.4
Erlang/OTP version: 23
ERTS version:       11.1
Compiled for:       x86_64-unknown-linux-gnu
Schedulers:         8
Schedulers online:  8
...

iex> runtime_info :memory

## Memory

Total:              20 MB
Atoms:              328 KB
Binaries:           111 KB
Code:               7 MB
ETS:                510 KB
Processes:          4 MB
...
# END_MARK:runtime_info
